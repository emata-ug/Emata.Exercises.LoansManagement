// <auto-generated />
using System;
using Emata.Exercise.LoansManagement.Borrowers.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Emata.Exercise.LoansManagement.Borrowers.Infrastructure.Data.Migrations
{
    [DbContext(typeof(BorrowersDbContext))]
    partial class BorrowersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Borrowers")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Emata.Exercise.LoansManagement.Borrowers.Domain.Borrower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasComputedColumnSql("    \"GivenName\" || ' ' || \"Surname\"", true);

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Borrowers", "Borrowers");
                });

            modelBuilder.Entity("Emata.Exercise.LoansManagement.Borrowers.Domain.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Partners", "Borrowers");
                });

            modelBuilder.Entity("Emata.Exercise.LoansManagement.Borrowers.Domain.Borrower", b =>
                {
                    b.HasOne("Emata.Exercise.LoansManagement.Borrowers.Domain.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Emata.Exercise.LoansManagement.Borrowers.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BorrowerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.Property<string>("Region")
                                .HasColumnType("text");

                            b1.Property<string>("Town")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BorrowerId");

                            b1.ToTable("Borrowers", "Borrowers");

                            b1.ToJson("Address");

                            b1.WithOwner()
                                .HasForeignKey("BorrowerId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Emata.Exercise.LoansManagement.Borrowers.Domain.Partner", b =>
                {
                    b.OwnsOne("Emata.Exercise.LoansManagement.Borrowers.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PartnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.Property<string>("Region")
                                .HasColumnType("text");

                            b1.Property<string>("Town")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PartnerId");

                            b1.ToTable("Partners", "Borrowers");

                            b1.ToJson("Address");

                            b1.WithOwner()
                                .HasForeignKey("PartnerId");
                        });

                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
